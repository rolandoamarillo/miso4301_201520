pre {
  "kdm2kdm Transformation".println();
}

post {
	generateClassLevelRelations();
	"Done".println();
}

//Raiz
rule ModelElement2ModelElement
transform t: code!ModelElement
to o: kdmMicro!ModelElement{

}

rule Segment2Segment	
transform t : code!Segment
to o : kdmMicro!Segment {
	o.name = t.name;
	o.`model` = t.`model`.equivalent();
	o.annotation = t.annotation.equivalent();
}

rule Annotation2Annotation
transform t: code!Annotation
to o: kdmMicro!Annotation{
	o.text = t.text;
}

// CodeModel

rule KDM2KDM
transform t : code!CodeModel
to o : kdmMicro!CodeModel {
	o.name = t.name;
	o.codeElement = t.codeElement.equivalent();
	o.annotation = t.annotation.equivalent();
}

//Elementos principales de código
rule AbstractCodeElement2AbstractCodeElement
transform t: code!AbstractCodeElement
to o: kdmMicro!AbstractCodeElement{
	o.name = t.name;
	o.codeRelation = t.codeRelation.equivalent();
	o.comment = t.comment.equivalent();
	   o.annotation = t.annotation.equivalent();
}

rule CommentUnit2CommentUnit
transform t : code!CommentUnit
to o : kdmMicro!CommentUnit {
	o.text= t.text;
}


rule CodeItem2CodeItem
transform t: code!CodeItem
to o: kdmMicro!CodeItem
extends AbstractCodeElement2AbstractCodeElement{
}

//-----------------------
//Elementos de tipo Modulo
rule Module2Module
transform t: code!Module
to o : kdmMicro!Module
extends CodeItem2CodeItem{
	o.codeElement = t.codeElement.equivalent();
}

rule Package2Package
transform t : code!Package
to o : kdmMicro!Package 
extends Module2Module{
	//o.name= t.name;
	//o.codeElement = t.codeElement.equivalent();
}

//--------------------------

//--------------------------
//Elementos de tipo ComputationalObject

rule ComputationalObject2ComputationalObject
transform t: code!ComputationalObject
to o: kdmMicro!ComputationalObject
extends CodeItem2CodeItem{
	
}

rule DataElement2DataElement
transform t : code!DataElement
to o: kdmMicro!DataElement
extends ComputationalObject2ComputationalObject{
	o.type = t.type.equivalent();
	o.codeElement = o.codeElement.equivalent();
	o.ext = t.ext;
	o.size = t.size;
}

rule ParameterUnit2ParameterUnit
transform t : code!ParameterUnit
to o : kdmMicro!ParameterUnit 
extends DataElement2DataElement{
	o.kind = t.kind.equivalent();
	o.pos = t.pos;
}

rule StorableUnit2StorableUnit
transform t : code!StorableUnit
to o : kdmMicro!StorableUnit 
extends DataElement2DataElement{
	o.kind = o.kind;/*
	var crel = new kdmMicro!ClassLevelRelation;
	crel.`from`= o.getParentClassUnit();
	crel.`to`= o.type.getParentClassUnit();
	crel.type = "SotorableUnit";*/
}

rule ControlElement2ControlElement
transform t : code!ControlElement
to o: kdmMicro!ControlElement
extends ComputationalObject2ComputationalObject{
	o.type = t.type.equivalent();
	o.codeElement = t.codeElement.equivalent();
}

rule MethodUnit2MethodUnit
transform t: code!MethodUnit
to o: kdmMicro!MethodUnit
extends ControlElement2ControlElement{
	o.kind = t.kind.equivalent();
}

rule CallabUnit2CallableUnit
transform t: code!CallableUnit
to o: kdmMicro!CallableUnit
extends ControlElement2ControlElement{
	o.kind = t.kind.equivalent();
}

//----------------------------

//----------------------------
//Elementos de tipo DataType

rule DataType2DataType
transform t: code!Datatype
to o: kdmMicro!Datatype
extends CodeItem2CodeItem{
	
}

rule TemplateUnit2TemplateUnit
transform t: code!TemplateUnit
to o: kdmMicro!TemplateUnit
extends DataType2DataType{
	o.codeElement = t.codeElement.equivalent();
}

rule ClassUnit2ClassUnit
transform t : code!ClassUnit
to o : kdmMicro!ClassUnit 
extends DataType2DataType{
	o.codeElement = t.codeElement.equivalent();
	o.isAbstract = t.isAbstract;
}

rule InterfaceUnit2InterfaceUnit
transform t: code!InterfaceUnit
to o: kdmMicro!InterfaceUnit
extends DataType2DataType{
	o.codeElement = t.codeElement.equivalent();
}

rule Signature2Signature
transform t : code!Signature
to o : kdmMicro!Signature 
extends DataType2DataType{
	o.parameterUnit = t.parameterUnit.equivalent();
}

//-----------------------------------

//-----------------------------------
// Relaciones: Elementos de tipo 

//Relaciones entre elementos de código
rule AbstractCodeRelationship2AbstractCodeRelationship
transform t: code!AbstractCodeRelationship
to o: kdmMicro!AbstractCodeRelationship{
	o.`to`= t.`to`.equivalent();
	o.`from` = t.`from`.equivalent();
	o.annotation  = t.annotation.equivalent();
}

rule Imports2Imports
transform t : code!Imports
to o : kdmMicro!Imports 
extends AbstractCodeRelationship2AbstractCodeRelationship{

}

rule VisibleIn2VisibleIn
transform t : code!VisibleIn
to o : kdmMicro!VisibleIn
extends AbstractCodeRelationship2AbstractCodeRelationship{

}

rule Implements2Implements
transform t : code!Implements
to o : kdmMicro!Implements
extends AbstractCodeRelationship2AbstractCodeRelationship{
}

rule ImplementationOf2ImplementationOf
transform t : code!ImplementationOf
to o : kdmMicro!ImplementationOf 
extends AbstractCodeRelationship2AbstractCodeRelationship{
}

rule Extends2Extends
transform t : code!Extends
to o : kdmMicro!Extends
extends AbstractCodeRelationship2AbstractCodeRelationship{
}

rule HasValue2HasValue
transform t : code!HasValue
to o : kdmMicro!HasValue 
extends AbstractCodeRelationship2AbstractCodeRelationship{
}

rule HasType2HasType
transform t : code!HasType
to o : kdmMicro!HasType 
extends AbstractCodeRelationship2AbstractCodeRelationship{
}

/*
rule ParameterTo2ParameterTo
transform t : code!ParameterTo
to o : kdmMicro!ParameterTo 
extends AbstractCodeRelationship2AbstractCodeRelationship{
}

rule InstanceOf2InstanceOf
transform t : code!InstanceOf
to o : kdmMicro!InstanceOf 
extends AbstractCodeRelationship2AbstractCodeRelationship{
}
*/

//------------------------------------
//ACTION PACKAGE

rule ActionElement2ActionElement
transform t : code!ActionElement
to o : kdmMicro!ActionElement 
extends AbstractCodeElement2AbstractCodeElement{
	o.kind = t.kind;
	o.codeElement = t.codeElement.equivalent();
	o.actionRelation = t.actionRelation.equivalent();
}

rule BlockUnit2BlockUnit
transform t : code!BlockUnit
to o : kdmMicro!BlockUnit 
extends ActionElement2ActionElement{
}

rule ExceptionUnit2ExceptionUnit
transform t : code!ExceptionUnit
to o : kdmMicro!ExceptionUnit 
extends BlockUnit2BlockUnit{
}

rule CatchUnit2CatchUnit
transform t : code!CatchUnit
to o : kdmMicro!CatchUnit 
extends ExceptionUnit2ExceptionUnit{
}

rule TryUnit2TryUnit
transform t : code!TryUnit
to o : kdmMicro!TryUnit 
extends ExceptionUnit2ExceptionUnit{
}

rule FinallyUnit2FinallyUnit
transform t : code!FinallyUnit
to o : kdmMicro!FinallyUnit 
extends ExceptionUnit2ExceptionUnit{
}


//--------------------------------

//Relaciones a nivel de acciones

rule AbstracActionRelationship2AbstracActionRelationship
transform t: code!AbstractActionRelationship
to o: kdmMicro!AbstracActionRelationship{
	o.`to`= t.`to`.equivalent();
	o.`from` = t.`from`.equivalent();
	o.annotation  = t.annotation.equivalent();
}

rule Call2Call
transform t : code!Calls
to o : kdmMicro!Calls 
extends AbstracActionRelationship2AbstracActionRelationship{
}

rule Reads2Reads
transform t : code!Reads
to o : kdmMicro!Reads 
extends AbstracActionRelationship2AbstracActionRelationship{
}

rule Writes2Writes
transform t : code!Writes
to o : kdmMicro!Writes 
extends AbstracActionRelationship2AbstracActionRelationship{

}

rule Creates2Creates
transform t : code!Creates
to o : kdmMicro!Creates
extends AbstracActionRelationship2AbstracActionRelationship{
}

//-------HELPERS--------

operation generateClassLevelRelations(){
	var mod = kdmMicro!CodeModel.allInstances().first();
	
	var sons = mod.getAllContentsByType();
	
	//A tiene un atributo de B
	for ( e in sons->select(a| a.isTypeOf(kdmMicro!StorableUnit)) ){
		if (e.type.isDefined()){
			var crel = new kdmMicro!ClassLevelRelation;
			crel.`from`= e.getParentClassUnit();
			crel.`to`= e.type.getParentClassUnit();
			crel.type = "SotorableUnit";			
			mod.codeElement.add(crel);
		}	
	}
	
	//A llama un servicio de B "calls"
	for (e in sons->select(a |a.isTypeOf(kdmMicro!ActionElement) and a.name = 'method invocation' )){
		var call = e.eContents()->select(c |c.isTypeOf(kdmMicro!Calls)).first();
		if (call.`from`.getParentClassUnit() <> call.`to`.getParentClassUnit()){
			var crel = new kdmMicro!ClassLevelRelation;
			crel.`from` = call.`from`.getParentClassUnit();
			crel.`to` = call.`to`.getParentClassUnit();
			crel.type = "MethodInvocation";
			mod.codeElement.add(crel);
		}	
	}
	
	//A tiene un método que referencia a B como parametro o como retorno
	for (e in sons->select(a |a.isTypeOf(kdmMicro!ParameterUnit))){
		if (e.type.isDefined()){
			var crel = new kdmMicro!ClassLevelRelation;
			crel.`from`= e.getParentClassUnit();
			crel.`to`= e.type.getParentClassUnit();
			crel.type = "ParameterUnit";			
			mod.codeElement.add(crel);
		}
	}

	//A implementa B
	for (e in sons->select(a |a.isTypeOf(kdmMicro!Implements))){
		if (e.`from`.isDefined()){
			var crel = new kdmMicro!ClassLevelRelation;
			crel.`from` = e.`from`.getParentClassUnit();
			crel.`to` = e.`to`.getParentClassUnit();
			crel.type = "Implements";			
			mod.codeElement.add(crel);
		}
	}
	
	//A extiende de B
	for (e in sons->select(a |a.isTypeOf(kdmMicro!Extends))){
		if (e.type.isDefined()){
			var crel = new kdmMicro!ClassLevelRelation;
			crel.`from` = e.`from`.getParentClassUnit();
			crel.`to` = e.`to`.getParentClassUnit();
			crel.type = "Extends";			
			mod.codeElement.add(crel);
		}
	}
	
	//Dentro de un metodo de una clase A se usa, modifica o instancia una variabale de tipo B - Writes/Reads/Creates
	for (e in sons->select(a |a.isTypeOf(kdmMicro!ActionElement) and a.name = 'ASSIGN' )){
		var call = e.eContents()->select(c |c.isTypeOf(kdmMicro!Writes) or c.isTypeOf(kdmMicro!Reads) or c.isTypeOf(kdmMicro!Creates)).first();	
		if (call.isDefined()){
			if (call.`to`.isDefined()){
			   if (e.getParentClassUnit() <> call.`to`.getParentClassUnit()){
					var crel = new kdmMicro!ClassLevelRelation;
					crel.`from` = e.getParentClassUnit();
					crel.`to` = call.`to`.getParentClassUnit();
					crel.type = "assignment";
					mod.codeElement.add(crel);
			   }
			}
		}	
	}
	
	//Anotaciones - HasValue
	for (e in sons->select(a |a.isTypeOf(kdmMicro!HasValue))){
	    var call = e.eContents()->select(c |c.isTypeOf(kdmMicro!Annotation)).first(); 	
		if (call.isDefined() and  e.`from`.getParentClassUnit() <> e.`to`.getParentClassUnit()){
			var crel = new kdmMicro!ClassLevelRelation;
			crel.`from` = e.`from`.getParentClassUnit();
			crel.`to` = e.`to`.getParentClassUnit();
			crel.type = "Annotation";			
			mod.codeElement.add(crel);
		}
	}
}

operation kdmMicro!AbstractCodeElement getParentClassUnit() : kdmMicro!CodeItem{
	var class = self;
	while (not (class.isTypeOf(kdmMicro!ClassUnit) or class.isTypeOf(kdmMicro!InterfaceUnit) or class.isTypeOf(kdmMicro!TemplateUnit))){
		class.println();
		class = class.eContainer();
	}
	return class;
}

operation kdmMicro!ModelElement getAllContentsByType(): Sequence{
	var set = new Sequence;
	set.addAll(self.eContents);
	for (e in  self.eContents()){
		set.addAll(e.getAllContentsByType());
	}
	return set;
}