rule KDM2KDM
transform t : code!CodeModel
to o : kdmMicro!CodeModel {
	o.name = t.name;
	o.codeElement = t.codeElement.equivalent();
}


rule ActionElement2ActionElement
transform t : code!ActionElement
to o : kdmMicro!ActionElement {
	o.name= t.name;
	o.kind = t.kind;
}

rule CommentUnit2CommentUnit
transform t : code!CommentUnit
to o : kdmMicro!CommentUnit {
	o.text= t.text;
}

rule Call2Call
transform t : code!Calls
to o : kdmMicro!Calls {
	o.`to`= t.`to`;
	o.`from` = t.`from`;
}

rule HasValue2HasValue
transform t : code!HasValue
to o : kdmMicro!HasValue {
	o.`to`= t.`to`;
	o.`from` = t.`from`;
}

rule Storabl2Storable
transform t : code!StorableUnit
to o : kdmMicro!StorableUnit {
	o.name= t.name;
	o.codeElement = t.codeElement.equivalent();
	o.attribute = t.attribute.equivalent();
	o.comment = t.comment.equivalent();
	o.codeRelation = t.codeRelation.equivalent(); //calls HasValue
}

rule Block2Block
transform t : code!BlockUnit
to o : kdmMicro!BlockUnit {
	o.name= t.name;
	o.codeElement = t.codeElement.equivalent();
}

rule Metod2Metod
transform t : code!MethodUnit
to o : kdmMicro!MethodUnit {
	o.name= t.name;
	o.type = t.type;
	o.codeElement = t.codeElement.equivalent();
	o.comment = t.comment.equivalent();
}

rule Import2Import
transform t : code!Imports
to o : kdmMicro!Imports {
	o.`to`= t.`to`;
	o.`from` = t.`from`;
}

rule Class2Class
transform t : code!ClassUnit
to o : kdmMicro!ClassUnit {
	o.name= t.name;
	o.comment = t.comment.equivalent();
	o.codeRelation = t.codeRelation.equivalent(); //imports
	o.codeElement = t.codeElement.equivalent();
}

rule Package2Package
transform t : code!Package
to o : kdmMicro!Package {
	o.name= t.name;
	o.codeElement = t.codeElement.equivalent();
}