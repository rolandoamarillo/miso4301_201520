pre {
  "Running SubKDM2SDM Transformation".println();
}

post {
	"Done".println();
}

rule SubKDM2SimplifiedDecisionMetrics 
	transform microModel : sourcemodel!Segment
	to sdm : sourcemodel!SimplifiedDecisionMetrics {
	sdm.measures = microModel.defineMeasures();
	sdm.observations = new List();
	var observation = new sourcemodel!Observation();
	observation.whenObserved = new Native('java.util.Date');
	sdm.observations.add(observation);
}

operation sourcemodel!Segment defineMeasures () : List {
	var resp = new List();
	if(sourcemodel!ClassLevelRelation.allInstances().size() > 0)
	{
	var cbo = new sourcemodel!CouplingBetweenObjectsMeasure();
	cbo.name = "CBO Coupling between Object Classes";
	cbo.description = "Two classes are coupled when methods declared in one class use methods or instance variables defined by the other class. The uses relationship can go either way: both uses and used-by relationships are taken into account, but only once.";
	resp.add(cbo);
	}
	return resp;
}

operation getMofElementFromModelElement(modelElement : sourcemodel!ModelElement) : sourcemodel!MofElement
{
 var mof = sourcemodel!MofElement.allInstances().selectOne( x | x.element = modelElement);
 if(mof = null)
 {
 mof = new sourcemodel!MofElement();
 mof.element = modelElement;
 }
	return mof;
}
