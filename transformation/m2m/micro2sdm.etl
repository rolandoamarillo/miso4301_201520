pre {
  "Running SubKDM2SDM Transformation".println();
}

post {
	"Done".println();
}

rule SubKDM2SimplifiedDecisionMetrics 
	transform microModel : sourcemodel!Segment
	to sdm : sourcemodel!SimplifiedDecisionMetrics {
	sdm.observations = new List();
	var observation = new sourcemodel!Observation();
	observation.whenObserved = new Native('java.util.Date');
	observation.measures = new List();
	for (mod in microModel.`model`) {
	if(mod.isTypeOf(sourcemodel!CodeModel))
	{
	mod.isKindOf(sourcemodel!ModelElement).println();
	var contents = mod.codeElement.asSequence().closure(x | x.eContents());
	observation.measures.add(mod.numberOfMethods(contents));
	var classes = contents.select(x| x.isTypeOf(sourcemodel!ClassUnit));
	observation.measures.add(mod.numberOfClasses(classes));
	if(not (mod.name="externals"))
	{
	observation.measures.add(mod.numberOfCommentLines(contents));
	observation.measures.add(mod.importsNumber(contents));
	observation.measures.add(mod.numberOfPackages(contents));
	--observation.measures.add(mod.numberPublicAPI(contents));
	}
	}
	--if(mod.isTypeOf(sourcemodel!InventoryModel))
	--{
	--var contents = mod.inventoryElement.asSequence().closure(x | x.eContents());
	--observation.measures.add(mod.numberOfFiles());
	--}
	sdm.observations.add(observation);
	}
	
	--var elemento = new sourcemodel!MofElement();
	--microModel.isKindOf(sourcemodel!ModelElement).println();
	--elemento.element = microModel;
}

operation sourcemodel!CodeModel importsNumber(sequence : Sequence) : sourcemodel!Measure {
    var m = new sourcemodel!Measure();
    var mof = getMofElementFromModelElement(self);
    m.name = "Número de importaciones de: " + self.name;
    m.measurements = new List();
   	var number = new sourcemodel!DimensionalMeasurement();
   	var size =  sequence.select(x| x.isTypeOf(sourcemodel!Imports)).size().asDouble();
   	number.value = size;
   	number.measurant = mof;
   	m.measurements.add(number);
	return m;
}

operation sourcemodel!CodeModel numberOfPackages(sequence : Sequence): sourcemodel!Measure {
    var m = new sourcemodel!NumberOfPackagesMeasure();
    var mof = getMofElementFromModelElement(self);
    m.name = "Número de paquetes de: " + self.name;
    m.measurements = new List();
    var mof = getMofElementFromModelElement(self);
   	var number = new sourcemodel!DimensionalMeasurement();
   	var numba = sequence.select(x| x.isTypeOf(sourcemodel!Package));
   	var size = numba.size().asDouble();
   	number.value = size;
   	number.measurant = mof;
   	m.measurements.add(number);
	return m;
}

operation sourcemodel!CodeModel numberOfClasses(sequence: Sequence): sourcemodel!Measure {
    var m = new sourcemodel!Measure();
    var mof = getMofElementFromModelElement(self);
    m.name = "Número de clases de: " + self.name;
    m.measurements = new List();
   	var number = new sourcemodel!DimensionalMeasurement();
   	var size = sequence.size().asDouble();
   	number.value = size;
   	number.measurant = mof;
   	m.measurements.add(number);
	return m;
}

operation sourcemodel!InventoryModel numberOfFiles(): sourcemodel!Measure {
    var m = new sourcemodel!Measure();
    var mof = getMofElementFromModelElement(self);
    m.name = "Número de archivos ";
    m.measurements = new List();
   	var number = new sourcemodel!DimensionalMeasurement();
   	var size = self.inventoryElement.size().asDouble();
   	number.value = size;
   	number.measurant = mof;
   	m.measurements.add(number);
	return m;
}

operation sourcemodel!CodeModel numberOfMethods(sequence: Sequence): sourcemodel!Measure {
    var m = new sourcemodel!Measure();
    var mof = getMofElementFromModelElement(self);
    m.name = "Número de métodos de: " + self.name;
    m.measurements = new List();
   	var number = new sourcemodel!DimensionalMeasurement();
   	var methods = sequence.select(x| x.isTypeOf(sourcemodel!MethodUnit));
   	var size = methods.size().asDouble();
   	number.value = size;
   	number.measurant = mof;
   	m.measurements.add(number);
	return m;
}

operation sourcemodel!CodeModel numberOfCommentLines(sequence: Sequence): sourcemodel!Measure {
    var m = new sourcemodel!Measure();
    m.name = "Número de líneas comentadas de: " + self.name;
    m.measurements = new List();
   	var number = new sourcemodel!DimensionalMeasurement();
   	var splChrs = 
   	"^.*[a-zA-Z0-9].*$";
   	--"[-\\[/@#$%^&_+=()~*.\\W\\s]+" ;
   	var size = sequence.select(x| (x.isTypeOf(sourcemodel!CommentUnit)) and (x.text.matches(splChrs))).size().asDouble();
   	number.value = size;
   	m.measurements.add(number);
	return m;
}

operation sourcemodel!CodeModel numberPublicAPI(sequence: Sequence): sourcemodel!Measure {
    var m = new sourcemodel!Measure();
    m.name = "Número de API público: " + self.name;
    m.measurements = new List();
   	var number = new sourcemodel!DimensionalMeasurement();
   	var classes = sequence.select(x1| x1.isTypeOf(sourcemodel!ClassUnit) and x1.attribute.value.contains("public"));
   	var methods = sequence.select(x| x.isTypeOf(sourcemodel!MethodUnit) and x.attribute.value.contains("public") );
   	var properties = sequence.select(x2| x2.isTypeOf(sourcemodel!StorableUnit) and x2.attribute.value.contains("public"));
   	var size = classes.size().asDouble() +  methods.size().asDouble() + properties.size().asDouble();
   	number.value = size;
   	number.measurant = mof;
   	m.measurements.add(number);
	return m;
}

operation getMofElementFromModelElement(modelElement : sourcemodel!ModelElement) : sourcemodel!MofElement
{
 var mof = sourcemodel!MofElement.allInstances().selectOne( x | x.element = modelElement);
 if(mof = null)
 {
 mof = new sourcemodel!MofElement();
 mof.element = modelElement;
 }
	return mof;
}
