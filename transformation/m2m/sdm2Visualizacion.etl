pre {
  "Running Visulization Transformation".println();
}

post {
	CreateDependecies();
	"Done".println();
}

//Raiz
rule Segment2Aplicacion
transform t: source!Segment
to o: target!Aplicacion{
  guard : t.name <> "externals"
 
  o.clusters = EjectCluster();
}

//Ejecuta el algoritmo de clouster y mapea con los respectivos objetos de VisualizacionMetricas
operation EjectCluster(){
    var lista = new Sequence;
    
    var count = 0;
    var modExt = source!CodeModel.allInstances().select(x| x.name = "externals").first();
	var sonsExt = modExt.getAllContents();
	
   	var segment = source!CodeModel.allInstances().first();
   	var classLR = source!ClassLevelRelation.allInstances();
	var classes = source!Segment.allInstances().first().getAllContents()->select(e| ((e.isTypeOf(source!ClassUnit) or e.isTypeOf(source!InterfaceUnit) or e.isTypeOf(source!TemplateUnit)) and not ExistsInExternals(sonsExt, e)));
	
	var clusterTool = new Native("subkdm.tools.ClusterCalculation");
    clusterTool.sayHello().println();
    clusterTool.segment = segment;
    clusterTool.relations = classLR->asSet();
    clusterTool.classes = classes->asSet();
    clusterTool.segment.println();
	
    var clusterSet = clusterTool.clusteringAlgorithm(classLR->asSet());
    //clusterSet.println();
    
    for (cluster in clusterSet){
      var nodoCluster = new target!Cluster();
  	  count = count + 1;
  	  nodoCluster.name ="Cluster" + count;
  	   
  	  for(c in cluster){
  	     var pkg = nodoCluster.CreatePackages(c);
  	     
  	     var nodoClasses = new target!Nodo();
  		 nodoClasses.name = c.name;
  		 nodoClasses.tipo = "Class";
  		 //nodoClasses.GetRelationsClass(classLR);
  		 pkg.hijos.add(nodoClasses);
      }
      
     lista.add(nodoCluster);
    }
    
   return lista;
}

//Crea los paquetes por cluster
operation target!Nodo CreatePackages(item: source!CodeItem){     
	//se obtiene el paquete al cual pertenece la clase
  	var package = item.eContainer();
  	      
  	var nodoPack = self.hijos.select(x | x.name == package.name).first();
	if(nodoPack.isDefined()){
		return nodoPack;
	}
	else{
		var nodoPack2 = new target!Nodo();
		nodoPack2.name = package.name;
		nodoPack2.tipo = "Package";
		self.hijos.add(nodoPack2);
		
		return 	nodoPack2;
	}
}

//Crea las dependencias para cada clase en el modelo
operation CreateDependecies(){

	var classLR = source!ClassLevelRelation.allInstances();
	var nodosClases = target!Nodo.allInstances().select(x | x.tipo = "Class");
	
	for(nodo in nodosClases)
	{
		nodo.GetRelationsClass(classLR, nodosClases);
	}	
}

//Obtiene las relaciones de cada clase para mapear a dependencias
operation target!Nodo GetRelationsClass(classLR: Sequence, nodosClases: Sequence){
	var relations = classLR.select(x | x.`from`.name == self.name);
	
	for(rel in relations){
		var package = rel.`from`.eContainer();
	    var dep = new target!Dependencia();
	    
	    var ClaseDep = nodosClases.select(x | x.name == rel.`to`.name).first();
	    dep.dependiente =  ClaseDep;
	    
	    for(t in rel.typeRelations){
	    	var tipoRel = new target!TipoRelacion();
	    	tipoRel.name = t.name;
	    	
	    	dep.tiposrelacion.add(tipoRel);
	    }
	    
		self.hijos.add(dep);
	}
}

//Obtiene la lista de todos los elementos que conetiene en el source
operation source!ModelElement getAllContents(): Sequence{
	var set = new Sequence;
	set.addAll(self.eContents());
	for (e in  self.eContents()){
		set.addAll(e.getAllContents());
	}
	return set;
}

// identifica si un ClassUnit esta en el paquete de externos
// para no inlcuirlas en las relaciones
operation ExistsInExternals(lista: Sequence,item: source!CodeItem): Boolean{
	if(lista.exists(a | a.equals(item)))
	 return true;
	else
	 return false; 	
}