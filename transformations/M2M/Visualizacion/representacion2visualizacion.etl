import "representacion2visualizacion.metricas.etl";
import "representacion2visualizacion.elementos.etl";
import "representacion2visualizacion.conectores.etl";
import "representacion2visualizacion.vinculos.etl";
import "representacion2visualizacion.utils.etl";


pre {
  "Running Visulization Transformation".println();
  
  //System.user.inform("A continuación se realizará una serie de preguntas con la finalidad de personalizar la visualización de las métricas del software");
  //var confirmacion = System.user.confirm("¿Desea continuar?");
  //confirmacion.println();
  
  var figuras : Sequence = Sequence{"Elíptica","Cuadrangular","Triangular"};
  var formaCluster = "Elíptica"; //System.user.choose("¿Cómo desea representar los clusters?", figuras, "Elíptica");
  //formaCluster.println();
  --var input : Real = System.user.promptInteger("Indique el porcentaje de acoplamiento para la generación del diagrama de clusters simplificado", 50); --pag 58
  --var percentage : Real = input / 100;
  //var colores = Sequence{'Blanco', 'Negro', 'Azul', 'Verde', 'Gris'}; 
  //var colorCalculatedCoupling = System.user.choose("Seleccione el color para la métrica de \"CalculatedCoupling\"", colores);
}

/*operation source!Elemento addReferencia(v : source!Vinculo) : Sequence {
	var referencias : Sequence;
	if (self.~referencias.isDefined()) {
		referencias = self.~referencias;
	} else {
		referencias  = new Sequence();
		self.~referencias = referencias;
	}
	referencias.add(v);
}*/

--CouplingBetweenObjects

/*operation generarDiagramaSimplificado() {
	var diagrama = target!Diagrama.allInstances()->select(d | d.isRoot)->first();
	var clusters = diagrama.elementos->select(e | e.isTypeOf(target!Elipse));
	
	var simplificado = new target!Diagrama();
	simplificado.name = diagrama.name + " Simplificado";
	simplificado.elementos = new Sequence();
	simplificado.diagrama = simplificado;
	
	var count = 1;
	var percentage : Real = 0.0;
	var visitados = new Sequence;
	for (cluster in clusters) {
		var clase  = new target!Clase();
		clase.name = "Cluster " + count;
		clase.elementos = new Sequence();
		clase.diagrama = clase;
		for (conector in cluster.conectores->select(c | c.source = cluster)) {
			if (not visitados->select(v | v = conector.target).isEmpty()) {
				continue;
			}
			
			if(conector.~percentageMeasureSource > percentage or conector.~percentageMeasureTarget > percentage) {
				var item = new target!Item(); 
				item.name = conector.target.name;
				--item.icono = "MessageSynchCallCreation";
				clase.elementos.add(item);
				visitados.add(conector.target);
			}
		}
		
		
		if(not clase.elementos.isEmpty()) {
			var item = new target!Item(); 
			item.name = cluster.name;
			--item.icono = "MessageSynchCallCreation";
			clase.elementos.add(item);
			simplificado.elementos.add(clase);
			visitados.add(cluster);
		} else {
			delete clase;
		}
		
		count = count + 1;
	}
}*/

operation generarDiagramaSimplificado() {
	var diagrama = target!Diagrama.allInstances()->select(d | d.isRoot)->first();
	
	if(not diagrama.isDefined())
	{
	  ":( No Se genero el Diagrama".println();
	  return;
	}
	
	var clusters = diagrama.elementos->select(e | e.isTypeOf(target!Elipse));
	
	"\tNúmero clusters: ".print();
	clusters.size().println();
	
	var percentage : Real = 0.5;
	var simplificado = new target!Diagrama();
	simplificado.name = diagrama.name + " Simplificado " + (percentage * 100) + "%";
	simplificado.elementos = new Sequence();
	simplificado.diagrama = simplificado;
	
	var count = 1;
	var visitados = new Set;
	for (cluster in clusters) {
		if (not visitados->select(v | v = cluster).isEmpty()) {
				continue;
		}
		else{
			var clase  = new target!Clase();
			clase.name = "Cluster " + count;
			clase.elementos = new Sequence();
			clase.diagrama = clase;
			--clase.~arcos = new Set;
			
			var conectados = cluster.darConectados(percentage);
			"*".print();
			for(elem in conectados){
				var item = new target!Item(); 
				item.name = elem.name;
				--item.icono = "MessageSynchCallCreation";
				clase.elementos.add(item);
				visitados.add(elem);
				".".print();
			}
			clase.~conectores= cluster.~conectores;
			simplificado.elementos.add(clase);
		}
		count = count + 1;
	}
	
	generarRelacionesDiagramaSimplificado(simplificado);
}

operation target!Elipse darConectados(percentage : Real): Set{
	var conjunto = new Set;
	conjunto.add(self);
	self.~conectores = new Set;
	for (conector in self.conectores->select(c | c.source = self)) {
		if(conector.~percentageMeasureSource > percentage or conector.~percentageMeasureTarget > percentage) {
			conjunto.add(conector.target);
			conjunto.addAll(conector.target.darConectados(percentage));
		} else {
			self.~conectores.add(conector.target.name);
		}
	}
	return conjunto;
}

operation generarRelacionesDiagramaSimplificado(simplificado : target!Diagrama) {
	for(clase in simplificado.elementos) {
		var asociaciones = new Set;
		for (conector in clase.~conectores) {
			for (relacionado in simplificado.elementos->select(e | e <> clase)) {
				if (relacionado.conectores->select(c | c.target = clase).isEmpty()) {
					for (item in relacionado.elementos) {
						if (item.name == conector) {
							var asociacion = new target!Asociacion;
							asociacion.enrutamiento = target!TipoEnrutamiento#DIRECTO;
							asociacion.source = clase;
							asociacion.target = relacionado;
							asociaciones.add(asociacion);
						}
					}
				}
			}
		}
		
		clase.conectores = asociaciones;
	}
}

post transformacionVinculos {
	"EliminarDiagramasDuplicados".println();
	eliminarDiagramasDuplicados();
	
	"\n\nActualizarReferenciasTarget".println();
	actualizarReferenciasTarget();
	
	"\n\nActualizarReferenciasDiagrama".println();
	actualizarReferenciasDiagrama();
	
	"\n\nEliminarConectoresSinTarget".println();
	eliminarConectoresSinTarget();
}

post transformacionMetricas {
	"\nCalcularRangoMetricas".println();
	calcularRangoMetricas();
	
	"\nInstanciarMetricasFigurasGeometricas".println();
	instanciarMetricasFigurasGeometricas();
	
	"\n\nInstanciarMetricasConectores".println();
	instanciarMetricasConectores();
	
	"\n\nGenerarDiagramaSimplificado".println();
	generarDiagramaSimplificado();
}

post {
	"\n\nDone".println();
}
