pre {
  "Running Visulization Transformation".println();
  
  //Se crean los tipos de relacion
  var dependencia = new target!Dependencia();
  var asociacion = new target!Asociacion();
  var composicion = new target!Composicion();
  var agregacion = new target!Agregacion();
  var generalizacion = new target!Generalizacion();
}

post {
    CreateDependecies();
	"Done".println();
}

//Raiz
rule Segment2NodoPrincipal
transform t: kdmMicro!CodeModel
to o: target!Aplicacion{
  guard : t.name <> "externals"
  o.name = t.name;
  o.hijos =  t.codeElement.select(x | x.isTypeOf(kdmMicro!Cluster)).equivalent();
}

//creacion cluster con sus paquetes y clases
rule Cluster2Cluster
transform t: kdmMicro!Cluster
to o: target!Cluster{
  o.name = t.name;
  
  //adiciona las clases del cluster
  for(codeItem in t.codeElement)
  {
  	var class = new target!Clase();
  	class.name = codeItem.name;
  	class.AddMetricsClass(codeItem);
  	AddClassToPackage(class, codeItem);
  	o.clases.add(class);
  }
  
  //adiciona las metricas del cluster
  var mofCluster = kdmMicro!MofElement.allInstances().select(x| x.element.isTypeOf(kdmMicro!Cluster) and x.element.equals(t)).first();
  if(mofCluster.isDefined())
  {
  	for(measurant in mofCluster.measurant)
  	{
  		var metrica = new target!Metrica();
  		metrica.SetTipoMetrics(measurant.measure);
  		metrica.valor = measurant.value;
  		o.metricas.add(metrica);
  	}
  }
}

//Adiciona a la clase de un cluster las metricas obtenidas en subkdm
operation target!Clase AddMetricsClass(class : kdmMicro!CodeItem){
  var mofClass = kdmMicro!MofElement.allInstances().select(x| (x.element.isTypeOf(kdmMicro!ClassUnit) or x.element.isTypeOf(kdmMicro!InterfaceUnit)) and x.element.equals(class)).first();
  if(mofClass.isDefined())
  {
  	for(measurant in mofClass.measurant)
  	{
  		var metrica = new target!Metrica();
  		metrica.SetTipoMetrics(measurant.measure);
  		metrica.valor = measurant.value;
  		self.metricas.add(metrica);
  	}
  }
}

//Obtiene el tipo de metrica
operation target!Metrica SetTipoMetrics(tipoMeasure: kdmMicro!Measure){
	if(tipoMeasure.isTypeOf(kdmMicro!NumberOfUsesMeasure))
	{
		self.tipo = target!TipoMetrica#NumberOfUses;
	}
	else if(tipoMeasure.isTypeOf(kdmMicro!NumberOfContainmentsMeasure))
	{
		self.tipo = target!TipoMetrica#NumberOfContainments;
	}
	else if(tipoMeasure.isTypeOf(kdmMicro!CalculatedCouplingMeasure))
	{
		self.tipo = target!TipoMetrica#CalculatedCoupling;
	}
	else if(tipoMeasure.isTypeOf(kdmMicro!CouplingBetweenObjectsMeasure))
	{
		self.tipo = target!TipoMetrica#CouplingBetweenObjects;
	}
	else if(tipoMeasure.isTypeOf(kdmMicro!WeightedMethodsPerClassMeasure))
	{
		self.tipo = target!TipoMetrica#WeightedMethodsPerClass;
	}
	else if(tipoMeasure.isTypeOf(kdmMicro!NumberOfClassesMeasure))
	{
		self.tipo = target!TipoMetrica#NumberOfClassesMeasure;
	}
	else if(tipoMeasure.isTypeOf(kdmMicro!NumberOfLinesMeasure))
	{
		self.tipo = target!TipoMetrica#NumberOfLinesMeasure;
	}
	else if(tipoMeasure.isTypeOf(kdmMicro!ClusterRelationConflictPercentageMeasure))
	{
		self.tipo = target!TipoMetrica#ClusterRelationConflictPercentageMeasure;
	}
}

//Adiciona una clase a un paquete, si el paquete ya existe adiciona la clase
//en caso contrario crea el nuevo paquete y adiciona la clase
operation AddClassToPackage(class:target!Clase, codEl: kdmMicro!CodeItem){
	 var packageName = codEl.GetNamePackage();
	 var paquetes = target!Paquete.allInstances();
	 var paquete = paquetes.select(x| x.name.equals(packageName)).first();
	 
	 if(paquete.isDefined())
	 {
	 	paquete.hijos.add(class);
	 }
	 else
	 {
	 	var package = new target!Paquete();
    	package.name = codEl.GetNamePackage();
    	package.hijos.add(class);
	 }
}

/*obtiene el nombre completo del paquete de una clase*/
operation kdmMicro!AbstractCodeElement GetNamePackage(): String
{
	var namePackage = "";
	var container = self.eContainer();
	
	while (container.isTypeOf(kdmMicro!Package)){
	   namePackage = container.name + "." + namePackage;
	   container = container.eContainer();
	}
	
	return namePackage;
}

//Crea las dependencias para cada clase en el modelo
//relaciones - arcos
operation CreateDependecies(){

	var classLR = kdmMicro!ClassLevelRelation.allInstances();
	var nodosClases = target!Clase.allInstances();
	
	for(nodo in nodosClases)
	{
		nodo.GetRelationsClass(classLR, nodosClases);
	}	
}

//Obtiene las relaciones de cada clase 
operation target!Nodo GetRelationsClass(classLR: Sequence, nodosClases: Sequence){
	var relations = classLR.select(x | x.`from`.name == self.name);
	
	for(rel in relations){
		var package = rel.`from`.eContainer();
	    var dep = new target!Arco();
	    
	    var ClaseTarg = nodosClases.select(x | x.name == rel.`to`.name).first();
	    dep.target =  ClaseTarg;
	    dep.source = self;
	    
	    dep.CreateMeasuresRelations(rel);
	    
	    for(t in rel.typeRelations){
	    	dep.AddTypeRelation(t);
	    }
	    
		self.hijos.add(dep);
	}
}

//asocia metricas de relaciones - arcos
operation target!Arco CreateMeasuresRelations(relation: kdmMicro!ClassLevelRelation){
	//buscar pesos de las metricas por clases...
	if(kdmMicro!MofElement.allInstances().exists(x | x.element.isTypeOf(kdmMicro!ClassLevelRelation) and x.element.equals(relation)))
	{
		var mofElement = kdmMicro!MofElement.allInstances().select(x | x.element.isTypeOf(kdmMicro!ClassLevelRelation) and x.element.equals(relation)).first();
		var measurant = mofElement.measurant.select(x | x.isTypeOf(kdmMicro!DimensionalMeasurement));
		
		for(m in measurant)
		{
			var met1 = new target!Metrica();
			met1.SetTipoMetrics(m.measure);
			met1.valor = m.value.asDouble();
			
			self.metricas.add(met1);
		}
	}
}

/*Adiciona a un arco el tipo de relacion segun modelo visualizacion*/
operation target!Arco AddTypeRelation(relation: kdmMicro!TypeRelation){
	
	if(relation.name == "Containment")
	{
		self.tipos.add(composicion);
	}
	else if(relation.name == "Uses")
	{
		self.tipos.add(dependencia);
	}
	else if(relation.name == "Implements")
	{
		self.tipos.add(generalizacion);
	}
	else if(relation.name == "Extends")
	{
		self.tipos.add(generalizacion);
	}
}