pre {
  "Running Visulization Transformation".println();
}

post {
	CreateDependecies();
	"Done".println();
	
	/*var classes = kdmMicro!CodeModel.allInstances().first().getAllContents()->select(class|class.isTypeOf(kdmMicro!ClassUnit) or class.isTypeOf(kdmMicro!InterfaceUnit) or class.isTypeOf(kdmMicro!TemplateUnit));
	var relations = kdmMicro!ClassLevelRelation.allInstances();
	var clusterTool = new Native("clusterer.EJBClusterer");
	
	var ejbs = new Set;
	var entities = new Set;
	
	for(c in classes){
		if (c.containsEntity()){
			entities.add(c);
		}
		else if(c.containsEJB()){
			ejbs.add(c);
		}
	}
	
	clusterTool.constructGraph(classes->asSet(),relations->asSet());
	
	var clusters = clusterTool.makeCluster(ejbs,entities);
	
	for(cluster in clusters){
		cluster.println();
	}
	
	
	var union = new Set;
	for(cluster in clusters){
		union.addAll(cluster);
	}
	
	var noClasificadas = classes->asSet()->select(c|not union->includes(c));
	
	noClasificadas.println();
	
	var i = 1;
	for(A in clusters){
		var j=1;
		for(B in clusters){
			var union = new Set;
			var intersect = new Set;
			
			union.addAll(A);
			union.addAll(B);
			
			intersect.addAll(A->select(c|B->includes(c)));
			
			var value = new Real;
			value = ((intersect->size()->asReal())/(A->size()->asReal())).max(((intersect->size()->asReal())/(B->size()->asReal())));
			
			(""+i+"--"+j+":"+value).println();
			
			j=j+1;
		}
		i=i+1;
	}*/
}


//Raiz
rule Segment2NodoPrincipal
transform t: kdmMicro!CodeModel
to o: target!Aplicacion{
  guard : t.name <> "externals"
  o.name = t.name;
  o.hijos = EjectCluster();
}

/* valida tipo de cluster a generar si por peso o segun relacion EJB*/
operation EjectCluster(): Sequence{
 	var lista = new Sequence;
 	var k = 1;	
   	var str = System.User.promptInteger("Select ejecution: 1- ClusterWeight 2- Cluster EJB", k.asInteger());
	k = str.asInteger();
	
	if(k = 1)
	{
		"creando Cluser x peso".println();
		lista = EjectClusterWeight();
	}
	else
	{
		"creando Cluser x EJBs".println();
		lista = EjectClusterEJB();
	}
	
	return lista;
}

/**/
operation target!Cluster Calculate(cluster: Set, clusterSet: Set){
		var A = cluster;
		var j=1;
		for(B in clusterSet){
			var union = new Set;
			var intersect = new Set;
			
			union.addAll(A);
			union.addAll(B);
			
			intersect.addAll(A->select(c|B->includes(c)));
			
			var value = new Real;
			value = ((intersect->size()->asDouble())/(A->size()->asDouble())).max(((intersect->size()->asDouble())/(B->size()->asDouble())));
			
			var cl = new target!Cluster();
			cl.name = "Cluster " + j;
			cl.value = value;
			//(""+i+"--"+j+":"+value).println();
			self.hijos.add(cl);
			j=j+1;
		}
}

/*Arma cluster de acuerdo a relaciones entre EJBs y los entities*/
operation EjectClusterEJB() : Sequence{
 var lista = new Sequence;
 
 var classes = kdmMicro!CodeModel.allInstances().first().getAllContents()->select(class|class.isTypeOf(kdmMicro!ClassUnit) or class.isTypeOf(kdmMicro!InterfaceUnit) or class.isTypeOf(kdmMicro!TemplateUnit));
	var relations = kdmMicro!ClassLevelRelation.allInstances();
	var clusterTool = new Native("clusterer.EJBClusterer");
	
	var ejbs = new Set;
	var entities = new Set;
	
	for(c in classes){
		if (c.containsEntity()){
			entities.add(c);
		}
		else if(c.containsEJB()){
			ejbs.add(c);
		}
	}
	
	clusterTool.constructGraph(classes->asSet(),relations->asSet());
	
	var clusterSet = clusterTool.makeCluster(ejbs,entities);
	var count = 0;
	for (cluster in clusterSet){
      var nodoCluster = new target!Cluster();
  	  count = count + 1;
  	  nodoCluster.name ="Cluster" + count;
  	   
  	  nodoCluster.Calculate(cluster, clusterSet);
  	  for(c in cluster){
  	     var pkg = nodoCluster.CreatePackages(c);
  	     
  	     var nodoClasses = new target!Clase();
  		 nodoClasses.name = c.name;
  		 pkg.hijos.add(nodoClasses);
      }
      
     lista.add(nodoCluster);
    }
    
   return lista;
}

/*Ejecuta funcionalidad de crear cluster de acuerdo al peso de las relaciones */
operation EjectClusterWeight() : Sequence{
    var lista = new Sequence;
    
    var count = 0;
    var modExt = kdmMicro!CodeModel.allInstances().select(x| x.name = "externals").first();
	var sonsExt = modExt.getAllContents();
	
   	var segment = kdmMicro!CodeModel.allInstances().first();
	var classes = kdmMicro!Segment.allInstances().first().getAllContents()->select(e| e.isTypeOf(kdmMicro!ClassUnit) and not ExistsInExternals(sonsExt, e));
	
	var clusterTool = new Native("clusterer.MSTCluesterCalculation");
	
	//buscar pesos de las relaciones por clases...
	var mofElements = kdmMicro!MofElement.allInstances().select(x | x.element.isTypeOf(kdmMicro!ClassLevelRelation));
	
	clusterTool.constructGraph(classes->asSet());
	for(elem in mofElements)
	{
	  var relation = elem.element;	
	  var measurant = elem.measurant;
	  //measurant.println();
	  var coupling = measurant.select(x| x.measure.isTypeOf(kdmMicro!CalculatedCouplingMeasure)).first();
	  var peso = 1;
	  	
	  if(coupling.value > 0)
	    peso = coupling.value;
	 	
	  clusterTool.addClassLevelRelation(relation, peso.asInteger()); 
	}
	
	var k = 4;
		
	var str = System.User.promptInteger("Number of Clusters", k.asInteger());
	k = str.asInteger();
	
	var clusterSet = clusterTool.getClusters(k);
	    
	for (cluster in clusterSet){
      var nodoCluster = new target!Cluster();
  	  count = count + 1;
  	  nodoCluster.name ="Cluster" + count;
  	   
  	  for(c in cluster){
  	     var pkg = nodoCluster.CreatePackages(c);
  	     
  	     var nodoClasses = new target!Clase();
  		 nodoClasses.name = c.name;
  		 pkg.hijos.add(nodoClasses);
      }
      
     lista.add(nodoCluster);
    }
    
   return lista;
}

//Crea los paquetes por cluster
operation target!Cluster CreatePackages(item: kdmMicro!CodeItem){     
	//se obtiene el paquete al cual pertenece la clase
  	var package = item.eContainer();
  	      
  	var nodoPack = self.hijos.select(x | x.name == package.name).first();
	if(nodoPack.isDefined()){
		return nodoPack;
	}
	else{
		var nodoPack2 = new target!Paquete();
		nodoPack2.name = package.name;
		self.hijos.add(nodoPack2);
		
		return 	nodoPack2;
	}
}

//Crea las dependencias para cada clase en el modelo
//relaciones - arcos
//metricas
operation CreateDependecies(){

	var classLR = kdmMicro!ClassLevelRelation.allInstances();
	var nodosClases = target!Nodo.allInstances().select(x | x.isTypeOf(target!Clase));
	
	for(nodo in nodosClases)
	{
		nodo.GetRelationsClass(classLR, nodosClases);
		nodo.CreateMeasuresClasses();
	}	
}

//asocia metricas de las clases
operation target!Nodo CreateMeasuresClasses(){
	//buscar pesos de las metricas por clases...
	if(kdmMicro!MofElement.allInstances().exists(x | x.element.isTypeOf(kdmMicro!ClassUnit) and x.element.name == self.name))
	{
		var mofElement = kdmMicro!MofElement.allInstances().select(x | x.element.isTypeOf(kdmMicro!ClassUnit) and x.element.name == self.name).first();
		var measurant = mofElement.measurant;
		
		for(m in measurant)
		{
			var met = new target!Metrica();
			met.valor = m.value; 
			if(m.measure.isDefined())
			{
				met.SetTipoMetrics(m.measure);
			}
			self.metricas.add(met);
		}
	}
}

//Obtiene las relaciones de cada clase 
operation target!Nodo GetRelationsClass(classLR: Sequence, nodosClases: Sequence){
	var relations = classLR.select(x | x.`from`.name == self.name);
	
	for(rel in relations){
		var package = rel.`from`.eContainer();
	    var dep = new target!Arco();
	    
	    var ClaseTarg = nodosClases.select(x | x.name == rel.`to`.name).first();
	    dep.target =  ClaseTarg;
	    dep.source = self;
	    
	    dep.CreateMeasuresRelations(rel);
	    
	    for(t in rel.typeRelations){
	    	dep.AddTypeRelation(t);
	    }
	    
		self.hijos.add(dep);
	}
}

/*Adiciona a un arco el tipo de relacion segun modelo visualizacion*/
operation target!Arco AddTypeRelation(relation: kdmMicro!TypeRelation){
	
	if(relation.name == "Containment")
	{
		var tipoRel = new target!Composicion();
		self.tipos.add(tipoRel);
	}
	else if(relation.name == "Uses")
	{
		var tipoRel = new target!Dependencia();
		self.tipos.add(tipoRel);
	}
	else if(relation.name == "Implements")
	{
		var tipoRel = new target!Generalizacion();
		self.tipos.add(tipoRel);
	}
	else if(relation.name == "Extends")
	{
		var tipoRel = new target!Generalizacion();
		self.tipos.add(tipoRel);
	}
}

//asocia metricas de relaciones - arcos
operation target!Arco CreateMeasuresRelations(relation: kdmMicro!ClassLevelRelation){
	//buscar pesos de las metricas por clases...
	if(kdmMicro!MofElement.allInstances().exists(x | x.element.isTypeOf(kdmMicro!ClassLevelRelation) and x.element.equals(relation)))
	{
		var mofElement = kdmMicro!MofElement.allInstances().select(x | x.element.isTypeOf(kdmMicro!ClassLevelRelation) and x.element.equals(relation)).first();
		var measurant = mofElement.measurant.select(x | x.isTypeOf(kdmMicro!DimensionalMeasurement));
		
		//measurant.println();
		for(m in measurant)
		{
			var met1 = new target!Metrica();
			met1.SetTipoMetrics(m.measure);
			met1.valor = m.value.asDouble();
			
			self.metricas.add(met1);
		}
	}
}

//Obtiene la lista de todos los elementos que conetiene en el source
operation kdmMicro!ModelElement getAllContents(): Sequence{
	var set = new Sequence;
	set.addAll(self.eContents());
	for (e in  self.eContents()){
		set.addAll(e.getAllContents());
	}
	return set;
}

// identifica si un ClassUnit esta en el paquete de externos
// para no inlcuirlas en las relaciones
operation ExistsInExternals(lista: Sequence,item: kdmMicro!CodeItem): Boolean{
	if(lista.exists(a | a.equals(item)))
	 return true;
	else
	 return false; 	
}

//obtiene el tipo de metrica
operation target!Metrica SetTipoMetrics(tipoMeasure: kdmMicro!Measure){
	
	if(tipoMeasure.isTypeOf(kdmMicro!NumberOfUsesMeasure))
	{
		self.tipo = target!TipoMetrica#NumberOfUses;
	}
	else if(tipoMeasure.isTypeOf(kdmMicro!NumberOfContainmentsMeasure))
	{
		self.tipo = target!TipoMetrica#NumberOfContainments;
	}
	else if(tipoMeasure.isTypeOf(kdmMicro!CalculatedCouplingMeasure))
	{
		self.tipo = target!TipoMetrica#CalculatedCoupling;
	}
	else if(tipoMeasure.isTypeOf(kdmMicro!CouplingBetweenObjectsMeasure))
	{
		self.tipo = target!TipoMetrica#CouplingBetweenObjects;
	}
	else if(tipoMeasure.isTypeOf(kdmMicro!WeightedMethodsPerClassMeasure))
	{
		self.tipo = target!TipoMetrica#WeightedMethodsPerClass;
	}
}

operation kdmMicro!CodeItem containsEntity(): Boolean
{
	return self.codeRelation.select(hasValue | hasValue.isTypeOf(kdmMicro!HasValue) and hasValue.annotation.size() > 0 and hasValue.`to`.name.equalsIgnoreCase("Entity") ).size > 0;
}

operation kdmMicro!CodeItem containsEJB(): Boolean
{
	return self.codeRelation.select(hasValue | hasValue.isTypeOf(kdmMicro!HasValue) and hasValue.annotation.size() > 0 and (hasValue.`to`.name.equalsIgnoreCase("Stateless") or hasValue.`to`.name.equalsIgnoreCase("Stateful") or hasValue.`to`.name.equalsIgnoreCase("Remote") ) ).size > 0;
}